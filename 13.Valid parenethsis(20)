20. Valid Parentheses
Easy
Topics
Companies
Hint
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true




public class ValidParentheses {
    public boolean isValid(String s) {
        // Loop until no changes are made to the string
        while (s.contains("()") || s.contains("[]") || s.contains("{}")) {
            // Replace all matching brackets with an empty string
            s = s.replace("()", "").replace("[]", "").replace("{}", "");
        }
        // If the string is empty, it is valid
        return s.isEmpty();
    }

    // Main method for testing
    public static void main(String[] args) {
        ValidParentheses vp = new ValidParentheses();

        // Test cases
        System.out.println(vp.isValid("()"));       // Output: true
        System.out.println(vp.isValid("()[]{}"));   // Output: true
        System.out.println(vp.isValid("(]"));       // Output: false
        System.out.println(vp.isValid("([)]"));     // Output: false
        System.out.println(vp.isValid("{[]}"));     // Output: true
    }
}



import java.util.Stack;

public class ValidParentheses {
    public boolean isValid(String s) {
        // Stack to hold opening brackets
        Stack<Character> stack = new Stack<>();
        
        // Loop through each character in the string
        for (char ch : s.toCharArray()) {
            // Push opening brackets onto the stack
            if (ch == '(' || ch == '[' || ch == '{') {
                stack.push(ch);
            } 
            // Check for matching closing brackets
            else {
                // If stack is empty, there's no opening bracket to match
                if (stack.isEmpty()) {
                    return false;
                }
                // Pop the top of the stack and check if it matches the closing bracket
                char top = stack.pop();
                if ((ch == ')' && top != '(') ||
                    (ch == ']' && top != '[') ||
                    (ch == '}' && top != '{')) {
                    return false;
                }
            }
        }
        
        // If stack is empty, all brackets matched; otherwise, invalid
        return stack.isEmpty();
    }

    // Main method for testing
    public static void main(String[] args) {
        ValidParentheses vp = new ValidParentheses();

        // Test cases
        System.out.println(vp.isValid("()"));       // Output: true
        System.out.println(vp.isValid("()[]{}"));   // Output: true
        System.out.println(vp.isValid("(]"));       // Output: false
        System.out.println(vp.isValid("([)]"));     // Output: false
        System.out.println(vp.isValid("{[]}"));     // Output: true
    }
}
